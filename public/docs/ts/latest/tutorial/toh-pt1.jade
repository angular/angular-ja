include ../_util-fns

:marked
  # Once Upon a Time

  # 昔々、あるところに

  Every story starts somewhere. Our story starts where the [QuickStart](../quickstart.html) ends.

  どんなお話にも始まりがあります。このお話は[クイックスタート](../quickstart.html)が終わったところから始まります。

  Run the <live-example></live-example> for this part.

  この章では、<live-example></live-example>を実行してください。

  Create a folder called `angular2-tour-of-heroes` and follow the [QuickStart](../quickstart.html) steps
  which provide the prerequisites, the folder structure, and the core files for our Tour of Heroes.

  `angular2-tour-of-heroes`という名前のフォルダーを作成したあと、[クイックスタート](../quickstart.html)のステップを
  追って、ヒーロー達のツアーのための事前準備、フォルダー構成、および主なファイルを用意してください。

include ../_quickstart_repo
:marked
  We should have the following structure:

  以下の構造が必要です：

.filetree
  .file angular2-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file main.ts
    .file node_modules ...
    .file typings ...
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
    .file typings.json
:marked
  ## Keep the app transpiling and running

  ## アプリケーションをトランスパイルし実行し続ける
  We want to start the TypeScript compiler, have it watch for changes, and start our server. We'll do this by typing

  TypeScriptコンパイラを起動し、変更を監視させて、サーバを起動しておきたいと思います。そうするには下記をタイプします。

code-example(language="bash").
  npm start

:marked
  This command runs the compiler in watch mode, starts the server, launches the app in a browser,
  and keeps the app running while we continue to build the Tour of Heroes.

  このコマンドは監視モードでコンパイラを実行し、サーバを起動し、ブラウザ上でアプリケーションを起動し、
  そしてヒーローのツアーをビルドし続ける間はそのアプリケーションを実行し続けます。

.l-main-section
  :marked
    ## Show our Hero

    ## ヒーローを登場させる
    We want to display Hero data in our app.

    アプリケーション上にヒーローを表示させたいと思います。

    Let's add two properties to our `AppComponent`, a `title` property for the application name and a `hero` property
    for a hero named "Windstorm".

    アプリケーション名のために`title`プロパティと、"Windstorm"という名前のヒーローのために`hero`プロパティという、
    2つのプロパティを`AppComponent`に追加してみましょう。

  +makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'app-component-1', 'app.component.ts (AppComponent class)')(format=".")

  :marked
    Now we update the template in the `@Component` decoration with data bindings to these new properties.

    ここで、この新しいプロパティにデータを紐付けるように、`@Component`デコレーションの中のテンプレートを更新します。

  +makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero')

  :marked
    The browser should refresh and display our title and hero.

    ブラウザがリフレッシュされて、タイトルとヒーローが表示されるはずです。

    The double curly braces tell our app to read the `title` and `hero` properties from the component and render them.
    This is the "interpolation" form of one-way data binding.

    このふたつの波括弧は、コンポーネントから`title`プロパティと`hero`プロパティを読み込んでレンダリングするよう、
    アプリケーションに指示します。
.l-sub-section
  :marked
    Learn more about interpolation in the [Displaying Data chapter](../guide/displaying-data.html).

    補間についての詳細は[データを表示する](../guide/displaying-data.html)の章を参照してください。
:marked
  ### Hero object

  ### Hero オブジェクト

  At the moment, our hero is just a name.  Our hero needs more properties.
  Let's convert the `hero` from a literal string to a class.

  今のところ、ヒーローは名前だけしかありません。ヒーローにはもっとプロパティが必要です。
  `hero`を文字リテラルからクラスへ改造しましょう。

  Create a `Hero` class with `id` and `name` properties.
  For now put this near the top of the `app.component.ts` file, just below the import statement.

  `id`プロパティと`name`プロパティを持った`Hero`クラスを作ります。
  今はこれを、`app.component.ts`ファイル上部のインポート文の直下に置きます。

+makeExample('toh-1/ts/app/app.component.ts', 'hero-class-1', 'app.component.ts (Hero class)')(format=".")

:marked
  Now that we have a `Hero` class, let’s refactor our component’s `hero` property to be of type `Hero`.
  Then initialize it with an id of `1` and the name, "Windstorm".

  `Hero`クラスができたので、コンポーネントの`hero`プロパティを`Hero`型にするようにリファクタリングしましょう。

+makeExample('toh-1/ts/app/app.component.ts', 'hero-property-1', 'app.component.ts (hero property)')(format=".")

:marked
  Because we changed the hero from a string to an object,
  we update the binding in the template to refer to the hero’s `name` property.

  heroを文字列からオブジェクトに変えたので、
  heroの`name`プロパティを参照するように、テンプレートのバインディングを更新します。

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero-2')
:marked
  The browser refreshes and continues to display our hero’s name.

  ブラウザがリフレッシュされても、ヒーローの名前が変わらず表示されます。

  ### Adding more HTML

  ### 更にHTMLを追加する
  Displaying a name is good, but we want to see all of our hero’s properties.
  We’ll add a `<div>` for our hero’s `id` property and another `<div>` for our hero’s `name`.

  名前の表示はうまくできましたが、ヒーローのすべてのプロパティを見たいと思います。
  `id`プロパティのために`<div>`を、そして`name`プロパティのためにもうひとつ`<div>`を追加します。

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero-properties')
:marked
  Uh oh, our template string is getting long. We better take care of that to avoid the risk of making a typo in the template.

  うわー、テンプレートの文字列が長くなってしまいました。
  テンプレートの中で入力間違いをしないように注意しなくてはいけません。

  ### Multi-line template strings

  ### 複数行テンプレート文字列

  We could make a more readable template with string concatenation
  but that gets ugly fast, it is harder to read, and
  it is easy to make a spelling error. Instead,
  let’s take advantage of the template strings feature
  in ES2015 and TypeScript to maintain our sanity.

  文字列を連結することでもっと読みやすいテンプレートすることはできるかもしれません。
  しかし、すぐに見苦しくなってしまい、読みにくく、スペルミスを簡単にするようになってしまいます。
  それよりも、正しさを維持するためにES2015とTypeScriptのテンプレート文字列の機能を利用しましょう。

  Change the quotes around the template to back-ticks and
  put the `<h1>`, `<h2>` and `<div>` elements on their own lines.

  テンプレートを囲んでいたクオートをバッククオートに変えて、
  `<h1>`、`<h2>`、および`<div>`要素を各行に置きます。

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'multi-line-strings', 'app.component.ts (AppComponent\'s template)')

  .callout.is-important
    header A back-tick is not a single quote

    header バッククオートはシングルクオートではありません。
    :marked
      **Be careful!** A back-tick (`) looks a lot like a single quote (').
      It's actually a completely different character.
      Back-ticks can do more than demarcate a string.
      Here we use them in a limited way to spread the template over multiple lines.
      Everything between the back-ticks at the beginning and end of the template
      is part of a single template string.

      **注意してくだい！** バッククオート(`)は、シングルクオート(')に見た目がよく似ています。
      実際はまったく異なる文字です。
      バッククオートは文字を区別する以上のことができます。
      ここでは、テンプレートを複数行に広げるような限定した方法で使っています。
      テンプレートの最初と最後にあるバッククオートの間はすべて、ひとつのテンプレート文字列です。

.l-main-section
:marked
  ## Editing Our Hero

  ## ヒーローを編集する

  We want to be able to edit the hero name in a textbox.

  テキストボックスでヒーローの名前を編集できるようにしたいと思います。

  Refactor the hero name `<label>` with `<label>` and `<input>` elements as shown below:

  ヒーロー名の`<label>`を、下記に示すように`<label>`と`<input>`要素に書き変えます：

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'editing-Hero', 'app.component.ts (input element)')
:marked
  We see in the browser that the hero’s name does appear in the `<input>` textbox.
  But something doesn’t feel right.
  When we change the name, we notice that our change
  is not reflected in the `<h2>`. We won't get the desired behavior
  with a one-way binding to `<input>`.

  ブラウザには、`<input>`テキストボックスの中にヒーローの名前が表示されています。
  しかし、なにかがおかしく感じます。
  その名前を変更したときに、その変更が`<h2>`に反映されていないことに気が付きます。
  `<input>`への一方向のバインディングでは求める振る舞いを得られないようです。

  ### Two-Way Binding

  ### 双方向バインディング

  We intend to display the name of the hero in the `<input>`, change it,
  and see those changes wherever we bind to the hero’s name.
  In short, we want two-way data binding.

  Before we can use two-way data binding for **form inputs**, we need to import the `FormsModule`
  package in our Angular module. We add it to the `NgModule` decorator's `imports` array. This array contains the list
  of external modules used by our application.
  Now we have included the forms package which includes `ngModel`.

+makeExample('toh-1/ts/app/app.module.ts', '', 'app.module.ts (FormsModule import)')

.l-sub-section
  :marked
    Learn more about the `FormsModule` and `ngModel` in the
    [Forms](../guide/forms.html#ngModel) and
    [Template Syntax](../guide/template-syntax.html#ngModel) chapters.

:marked
  Let’s update the template to use the  **`ngModel`** built-in directive for two-way binding.

  Replace the `<input>` with the following HTML

code-example(language="html").
  &lt;input [(ngModel)]="hero.name" placeholder="name">

:marked
  The browser refreshes. We see our hero again. We can edit the hero’s name and
  see the changes reflected immediately in the `<h2>`.

.l-main-section
:marked
  ## The Road We’ve Travelled
  Let’s take stock of what we’ve built.

  * Our Tour of Heroes uses the double curly braces of interpolation (a kind of one-way data binding)
  to display the application title and properties of a `Hero` object.
  * We wrote a multi-line template using ES2015’s template strings to make our template readable.
  * We can both display and change the hero’s name after adding a two-way data binding to the `<input>` element
  using the built-in `ngModel` directive.
  * The `ngModel` directive also propagates changes to every other binding of the `hero.name`.

  Run the <live-example></live-example> for this part.

  Here's the complete `app.component.ts` as it stands now:

+makeExample('toh-1/ts/app/app.component.ts', 'pt1', 'app.component.ts')

.l-main-section
:marked
  ## The Road Ahead
  Our Tour of Heroes only displays one hero and we really want to display a list of heroes.
  We also want to allow the user to select a hero and display their details.
  We’ll learn more about how to retrieve lists, bind them to the
  template, and allow a user to select a hero in the
  [next tutorial chapter](./toh-pt2.html).
