# Angular テンプレートコンパイラオプション {@a compiler-options}

テンプレートコンパイラオプションは、`tsconfig.json` ファイルの `"angularCompilerOptions"` オブジェクトのメンバとして指定されています。次に示すように、TypeScript コンパイラに提供されるオプションとともにテンプレートコンパイラオプションを指定します。

  ```json
    {
      "compilerOptions": {
        "experimentalDecorators": true,
                  ...
      },
      "angularCompilerOptions": {
        "fullTemplateTypeCheck": true,
        "preserveWhitespaces": true,
                  ...
      }
    }
  ```

次のセクションでは、Angular のテンプレートコンパイラオプションについて説明します。

### *enableResourceInlining*
このオプションは、すべての `@Component` デコレーターの `templateUrl` および `styleUrls` プロパティを `template` および `styles` プロパティのインライン化された内容に置き換えるようにコンパイラに指示します。
有効にすると、`ngc` の `.js` 出力には、遅延ロードされた `templateUrl` または `styleUrls` がありません。

### *skipMetadataEmit*

このオプションは、`.metadata.json` ファイルを生成しないようにコンパイラーに指示します。
このオプションはデフォルトでは `false` です。

`.metadata.json` ファイルには、TypeScript コンパイラによって生成された `.d.ts` ファイルに含まれていない `.ts` ファイルから、
テンプレートコンパイラによって必要とされる情報が含まれています。
たとえば、この情報には、TypeScript が `.js` ファイルに発行するが `.d.ts` ファイルには発行しない注釈の内容
(コンポーネントのテンプレートなど) が含まれています。

TypeScript の `--outFile` オプションを使用している場合は、このオプションを `true` に設定してください。
メタデータファイルはこのスタイルの TypeScript 出力には無効です。Angular で `--outFile` を使用することはお勧めできません。
代わりに、[webpack](https://webpack.js.org/) などのバンドラーを使用してください。

ファクトリーサマリーには `.metadata.json` ファイルにある情報のコピーが含まれているため、
ファクトリーサマリーを使用するときにもこのオプションを `true` に設定できます。

### *strictMetadataEmit*

このオプションは、`"skipMetadataEmit"` が `false` の場合、`.metadata.json` ファイルにエラーを報告するようにテンプレートコンパイラに指示します。
このオプションはデフォルトでは `false` です。これは、`"skipMetadataEmit"` が `false` で `"skipTemplateCodeGen"` が `true` の場合にのみ使用されるべきです。

このオプションは、`npm` パッケージとのバンドル用に発行された `.metadata.json` ファイルを検証するためのものです。検証は厳密であり、テンプレートコンパイラで使用されたときにエラーが発生しないようなメタデータに対してエラーを発生させる可能性があります。シンボルを説明するコメントに `@dynamic` を含めることで、エクスポートされたシンボルに対してこのオプションによって発生するエラーを抑制することを選択できます。

`.metadata.json` ファイルにエラーが含まれていることは有効です。
メタデータを使用して注釈の内容を判断すると、テンプレートコンパイラはこれらのエラーを報告します。
メタデータコレクターは、アノテーションで使用するために設計されたシンボルを予測できないため、
エクスポートされたシンボルのメタデータにエラーノードを優先的に含めます。
これらのシンボルが使用されている場合、テンプレートコンパイラはエラーノードを使用してエラーを報告できます。
ライブラリのクライアントが注釈でシンボルを使うつもりなら、テンプレートコンパイラは通常クライアントがシンボルを使うまでこれを報告しません。
このオプションはライブラリのビルド段階でこれらのエラーを検出することを可能にし、たとえば Angular ライブラリ自身を作成する際に使用されます。

### *skipTemplateCodegen*

このオプションは、`.ngfactory.js` ファイルと `.ngstyle.js` ファイルの出力を抑制するようにコンパイラーに指示します。
設定されると、これはテンプレートコンパイラの大部分をオフにし、
テンプレート診断の報告を無効にします。
このオプションは、`npm` に配布できない `.ngfactory.js` および `.ngstyle.js` ファイルの作成を避けながら、
`npm` パッケージで配布するための `.metadata.json` ファイルを作成するように
テンプレートコンパイラに指示するために使用できます。

### *strictInjectionParameters*

`true` に設定した場合、このオプションは、インジェクションタイプを判別できない指定されたパラメーターについてエラーを報告するようコンパイラーに指示します。
このオプションが提供されていないか `false` の場合、
型を解決できない `@Injectable` でマークされたクラスのコンストラクターパラメータは警告を生成します。

*注*: 将来このオプションはデフォルトで `true` になるので、このオプションを明示的に `true` に変更することをお勧めします。

### *flatModuleOutFile*

`true` に設定すると、このオプションは、指定されたファイル名と対応するフラットモジュールメタデータのフラットモジュールインデックスを生成するようにテンプレートコンパイラに指示します。
`@angular/core` および `@angular/common` と同様に
パッケージ化されているフラットモジュールを作成するときにこのオプションを使用します。
このオプションを使用すると、ライブラリの `package.json` は、ライブラリインデックスファイルではなく、
生成されたフラットモジュールインデックスを参照するようになります。
このオプションを使用すると、ライブラリインデックスからエクスポートされたシンボルに必要なすべてのメタデータを含む
1 つの `.metadata.json` ファイルのみが生成されます。
生成された `.ngfactory.js` ファイルでは、フラットモジュールインデックスを使用して、
ライブラリインデックスからのパブリック API と、内部の短いシンボルの両方を含むシンボルをインポートします。

デフォルトでは、`files` フィールドに指定された `.ts` ファイルがライブラリインデックスと見なされます。
複数の `.ts` ファイルが指定されている場合は、`libraryIndex` を使用して使用するファイルを選択します。
`libraryIndex` なしで複数の `.ts` ファイルが指定された場合、エラーが発生します。
フラットモジュールインデックス `.d.ts` および `.js` は、
ライブラリインデックス `.d.ts` ファイルと同じ場所に、指定された `flatModuleOutFile` 名で作成されます。
たとえば、ライブラリがモジュールのライブラリインデックスとして `public_api.ts` ファイルを使用する場合、
`tsconfig.json` `files` フィールドは `["public_api.ts"]` になります。
その後、`flatModuleOutFile` オプションを `"index.js"` に設定すると、`index.d.ts` ファイルと `index.metadata.json` ファイルが生成されます。
ライブラリの `package.json` の `module` フィールドは `"index.js"` になり、
`typings` フィールドは `"index.d.ts"` になります。

### *flatModuleId*

このオプションは、フラットモジュールのインポートに使用する優先モジュール ID を指定します。
テンプレートコンパイラによって生成された参照は、
フラットモジュールからシンボルをインポートするときにこのモジュール名を使用します。
これは、`flatModuleOutFile` も指定されている場合にのみ意味があります。
それ以外の場合、コンパイラはこのオプションを無視します。

### *generateCodeForLibraries*

このオプションは、対応する `.metadata.json` ファイルとともに `.d.ts` ファイル用のファクトリファイル (`.ngfactory.js` および `.ngstyle.js`) を生成するようにテンプレートコンパイラに指示します。
このオプションのデフォルトは `true` です。
このオプションが `false` の場合、ファクトリファイルは `.ts` ファイルに対してのみ生成されます。

ファクトリーサマリーを使用する場合、このオプションは `false` に設定するべきです。

### *fullTemplateTypeCheck*

このオプションは、TypeScript を使用してバインディング式を検証するテンプレートコンパイラの[バインディング式の検証](#binding-expression-validation)フェーズを
有効にするようにコンパイラに指示します。

このオプションはデフォルトでは `false` です。

*注*: 将来このオプションがデフォルトで `true` になるため、これを `true` に設定することをお勧めします。

### *annotateForClosureCompiler*

このオプションは、[クロージャコンパイラ](https://github.com/google/closure-compiler)が必要とする [JSDoc](http://usejsdoc.org/) コメントで、
発行された JavaScript に注釈を付けるために [Tsickle](https://github.com/angular/tsickle) を使用するようにコンパイラに指示します。
このオプションのデフォルトは `false` です。

### *annotationsAs*

このオプションを使用して、Angular 固有のアノテーションをどのように発行してツリーシェイキングを改善するかを変更します。
Angular 以外のアノテーションとデコレーターは影響を受けません。デフォルトは `static fields` です。

<style>
  td, th {vertical-align: top}
</style>

<table>
  <tr>
    <th>値</th>
    <th>説明</th>
  </tr>
  <tr>
    <td><code>decorators</code></td>
    <td>デコレータをそのままにしておきます。これによりコンパイルが速くなります。TypeScript は __decorate ヘルパーへの呼び出しを発行します。ランタイムリフレクションには <code>--emitDecoratorMetadata</code> を使用してください。ただし、結果のコードは適切にツリーシェイクされません。</td>
  </tr>
  <tr>
    <td><code>static fields</code></td>
    <td>クラス内のデコレータをスタティックフィールドに置き換えます。<a href="https://github.com/google/closure-compiler">クロージャコンパイラ</a>のような高度なツリーシェイカーが未使用のクラスを削除することを許可します。</td>
  </tr>
  </table>


### *trace*

これは、テンプレートのコンパイル中に追加の情報を出力するようコンパイラーに指示します。

### *enableLegacyTemplate*

同じ名前の DOM の要素と衝突しないように `<ng-template>` を使用するため、Angular 4.0 から `<template>` 要素の使用は廃止されました。
このオプションを `true` に設定すると、廃止予定の `<template>` 要素を使用できるようになります。
このオプションはデフォルトでは `false` です。
このオプションは、一部のサードパーティ Angular ライブラリで必要となる場合があります。

### *disableExpressionLowering*

Angular テンプレートコンパイラは、アノテーションで使用されている、または使用される可能性があるコードを変換して、
テンプレートファクトリモジュールからインポートできるようにします。
詳細については、[メタデータの書き換え](#metadata-rewriting)を参照してください。

このオプションを `false` に設定すると、この書き換えが無効になり、
書き換えを手動で行う必要があります。

### *disableTypeScriptVersionCheck*

`true` の場合、このオプションはコンパイラに TypeScript のバージョンをチェックしないように指示します。
TypeScript のサポートされていないバージョンが使用されている場合、コンパイラはチェックをスキップし、エラーにはなりません。
このオプションを `true` に設定することは TypeScript のサポートされていないバージョンが未定義の動作をするかもしれないのでお勧めできません。

このオプションはデフォルトでは `false` です。

### *preserveWhitespaces*

このオプションは、コンパイル済みのテンプレートから空白のテキストノードを削除するかどうかをコンパイラに指示します。
v6 以降、このオプションはデフォルトでは `false` になっているため、発行されるテンプレートファクトリモジュールは小さくなります。

### *allowEmptyCodegenFiles*

空の場合でも、生成される可能性のあるすべてのファイルを生成するようにコンパイラーに指示します。
このオプションはデフォルトでは `false` です。
これは Bazel ビルドルールで使用されるオプションで、Bazel ルールがファイルの依存関係を追跡する方法を単純化するために必要です。
Bazel の規則の範囲外でこのオプションを使用することはお勧めできません。
